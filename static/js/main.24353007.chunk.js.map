{"version":3,"sources":["Components/Header/Header.js","Components/Homepage/Hompage.js","Components/Blogpage/BloglistItem.js","Components/Blogpage/PaginationHelper.js","Components/Blogpage/Blogpage.js","App.js","serviceWorker.js","index.js"],"names":["Header","Navbar","bg","variant","Nav","className","to","Homepage","BloglistItem","post","title","body","PaginationHelper","postsPerPage","totalPosts","paginate","items","number","push","Pagination","Item","key","active","onClick","Math","ceil","Blogpage","state","posts","currentPage","pageNumber","setState","fetch","then","response","json","this","indexOfLastPost","indexOfFirstPost","blogList","slice","map","blogPost","id","length","Component","Main","exact","path","component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"oRAmBeA,MAff,WACE,OACE,kBAACC,EAAA,EAAD,CAAQC,GAAG,OAAOC,QAAQ,QACxB,kBAACC,EAAA,EAAD,CAAKC,UAAU,WACb,kBAAC,IAAD,CAAMA,UAAU,WAAWC,GAAG,KAA9B,QAGA,kBAAC,IAAD,CAAMD,UAAU,WAAWC,GAAG,aAA9B,eCAOC,MATf,WACE,OACE,yBAAKF,UAAU,YACb,6CACA,mD,gCCOSG,MAVf,YAAiC,IAATC,EAAQ,EAARA,KACtB,OACE,6BAASJ,UAAU,QACjB,4BAAKI,EAAKC,OACV,2BAAID,EAAKE,MACT,kBAAC,IAAD,CAAML,GAAE,qBAAR,mB,QCqBSM,MA1Bf,YAGE,IAHiE,IAAvCC,EAAsC,EAAtCA,aAAcC,EAAwB,EAAxBA,WAAYC,EAAY,EAAZA,SAEhDC,EAAQ,GAFoD,WAI1DC,GAIJD,EAAME,KACJ,kBAACC,EAAA,EAAWC,KAAZ,CACEC,IAAKJ,EACLK,OAVO,IAUCL,EACRM,QAAS,kBAAMR,EAASE,KAEvBA,KAVDA,EAAS,EACbA,GAAUO,KAAKC,KAAKX,EAAaD,GACjCI,IACC,EAHGA,GAeN,OACE,6BACE,kBAACE,EAAA,EAAD,KAAaH,KCeJU,E,4MAlCbC,MAAQ,CAAEC,MAAO,GAAIC,YAAa,EAAGhB,aAAc,G,EAQnDE,SAAW,SAACe,GACV,EAAKC,SAAS,CAAEF,YAAaC,K,kEARV,IAAD,OAClBE,MAAM,8CACHC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACL,GACL,EAAKG,SAAS,CAAEH,e,+BAMZ,IAAD,EACsCQ,KAAKT,MAA1CC,EADD,EACCA,MAAOC,EADR,EACQA,YAAahB,EADrB,EACqBA,aACtBwB,EAAkBR,EAAchB,EAChCyB,EAAmBD,EAAkBxB,EAGrC0B,EAFeX,EAAMY,MAAMF,EAAkBD,GAErBI,KAAI,SAACC,GACjC,OAAO,kBAAC,EAAD,CAAcrB,IAAKqB,EAASC,GAAIlC,KAAMiC,OAE/C,OACE,6BAASrC,UAAU,kBACjB,wBAAIA,UAAU,qBAAd,UACCkC,EACD,kBAAC,EAAD,CACE1B,aAAcA,EACdC,WAAYc,EAAMgB,OAClB7B,SAAUqB,KAAKrB,gB,GA5BF8B,aCGvB,SAASC,IACP,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,SAASC,UAAW1C,IACtC,kBAAC,IAAD,CAAOwC,OAAK,EAACC,KAAK,kBAAkBC,UAAWvB,KAetCwB,MAXf,WACE,OACE,kBAAC,IAAD,KACE,yBAAK7C,UAAU,OACb,kBAAC,EAAD,MACA,kBAACyC,EAAD,SCRYK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB9B,MAAK,SAAA+B,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.24353007.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Navbar, Nav } from \"react-bootstrap\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nfunction Header() {\r\n  return (\r\n    <Navbar bg='dark' variant='dark'>\r\n      <Nav className='mr-auto'>\r\n        <Link className='nav-link' to='/'>\r\n          Home\r\n        </Link>\r\n        <Link className='nav-link' to='/blogpage'>\r\n          Blogpage\r\n        </Link>\r\n      </Nav>\r\n    </Navbar>\r\n  );\r\n}\r\n\r\nexport default Header;\r\n","import React from \"react\";\r\n\r\nfunction Homepage() {\r\n  return (\r\n    <div className='homepage'>\r\n      <h1>Hy i'm Raluca</h1>\r\n      <p>Check out my blog!</p>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Homepage;\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nfunction BloglistItem({ post }) {\r\n  return (\r\n    <article className='mb-4'>\r\n      <h3>{post.title}</h3>\r\n      <p>{post.body}</p>\r\n      <Link to={`/blogpage/article`}> Read more...</Link>\r\n    </article>\r\n  );\r\n}\r\n\r\nexport default BloglistItem;\r\n","import React from \"react\";\r\nimport Pagination from \"react-bootstrap/Pagination\";\r\n\r\nfunction PaginationHelper({ postsPerPage, totalPosts, paginate }) {\r\n  let active = 1;\r\n  let items = [];\r\n  for (\r\n    let number = 1;\r\n    number <= Math.ceil(totalPosts / postsPerPage);\r\n    number++\r\n  ) {\r\n    items.push(\r\n      <Pagination.Item\r\n        key={number}\r\n        active={number === active}\r\n        onClick={() => paginate(number)}\r\n      >\r\n        {number}\r\n      </Pagination.Item>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <Pagination>{items}</Pagination>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default PaginationHelper;\r\n","import React, { Component } from \"react\";\r\nimport BloglistItem from \"./BloglistItem\";\r\nimport PaginationHelper from \"./PaginationHelper\";\r\n\r\nclass Blogpage extends Component {\r\n  state = { posts: [], currentPage: 1, postsPerPage: 5 };\r\n  componentDidMount() {\r\n    fetch(\"https://jsonplaceholder.typicode.com/posts\")\r\n      .then((response) => response.json())\r\n      .then((posts) => {\r\n        this.setState({ posts });\r\n      });\r\n  }\r\n  paginate = (pageNumber) => {\r\n    this.setState({ currentPage: pageNumber });\r\n  };\r\n  render() {\r\n    const { posts, currentPage, postsPerPage } = this.state;\r\n    const indexOfLastPost = currentPage * postsPerPage;\r\n    const indexOfFirstPost = indexOfLastPost - postsPerPage;\r\n    const currentPosts = posts.slice(indexOfFirstPost, indexOfLastPost);\r\n    // console.log(posts);\r\n    const blogList = currentPosts.map((blogPost) => {\r\n      return <BloglistItem key={blogPost.id} post={blogPost} />;\r\n    });\r\n    return (\r\n      <section className='container mt-4'>\r\n        <h1 className='text-primary md-3'>MyBlog</h1>\r\n        {blogList}\r\n        <PaginationHelper\r\n          postsPerPage={postsPerPage}\r\n          totalPosts={posts.length}\r\n          paginate={this.paginate}\r\n        />\r\n      </section>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Blogpage;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { Switch, Route, BrowserRouter as Router } from \"react-router-dom\";\nimport Header from \"./Components/Header/Header\";\nimport Homepage from \"./Components/Homepage/Hompage\";\nimport Blogpage from \"./Components/Blogpage/Blogpage\";\nfunction Main() {\n  return (\n    <Switch>\n      <Route exact path='/blog/' component={Homepage} />\n      <Route exact path='/blog//blogpage' component={Blogpage} />\n    </Switch>\n  );\n}\nfunction App() {\n  return (\n    <Router>\n      <div className='App'>\n        <Header />\n        <Main />\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}